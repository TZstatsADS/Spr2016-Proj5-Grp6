while (i<=iters) {
proposal <- sample(1:26,2) # select 2 letters to switch
prop.mapping=mapping
prop.mapping[proposal[1]]=mapping[proposal[2]]
prop.mapping[proposal[2]]=mapping[proposal[1]]
prop.decode=decode(prop.mapping,coded)
prop.loglike=log.prob(prop.mapping,prop.decode)
if (runif(1)<exp(prop.loglike-cur.loglike)) {
mapping=prop.mapping
cur.decode=prop.decode
cur.loglike=prop.loglike
if (cur.loglike>max.loglike) {
max.loglike=cur.loglike
max.decode=cur.decode
}
cat(i,cur.decode,"\n")
i=i+1
}
}
#Regular Decode
cur.decode
#Log Likelihood
cur.loglike
#Max Log Likelihood
max.loglike
#Max LL of Decode
max.decode
#
#Workbench Package Setup
library(ggplot2)
library(graphics)
library(RColorBrewer)
library(foreign)
library(gridExtra)
library(plotrix)
library(EBImage)
library(jpeg)
#Data Import
yesdat <- read.csv("C:\\Users\\NMLJ\\Documents\\AtHome1.csv", header = TRUE)
#Have you attended events
event.yes <- c(rep(2,44))
event.no <- c(rep(1,10))
prop.yes <- 44/54
prop.no <- 10/54
event.attend <- c(event.yes, event.no)
event.prop <- c(prop.no, prop.yes)
names(event.prop) <- c("No", "Yes")
#Graphically
pie1 <- pie3D(event.prop, labels= names(event.prop), col=c("green3", "green4"), main="Have Members Attended\nSocial Events?")
p1 <- barplot(yesdat$EventQual, main="Rating of Event Quality", ylab="Number of Responses", col = c("green3","greenyellow","green4", "limegreen"))
axis(side=1, at= p1,labels= c("Excellent","Good", "Fair","Poor"),cex.axis=.75)
#Data
transport.yes <- 22/54
transport.no <- 32/54
transport.prop <- c(transport.yes, transport.no)
names(transport.prop) <- c("Yes", "No")
#Graphically
pie2 <- pie3D(transport.prop, labels= names(transport.prop), col=c("green4", "green3"), main="Have Members Used\nTransportation Services?")
p2 <- barplot(yesdat$Transport, main="Rating of Transportation Services", ylab="Number of Responses", col = c("green3","greenyellow","green4", "limegreen"))
axis(side=1, at= p1,labels= c("Excellent","Good", "Fair","Poor"),cex.axis=.75)
#Data
health.yes <- 6/48
health.no <- 42/48
health.prop <- c(health.yes, health.no)
names(health.prop) <- c("Yes", "No")
#Graphically
pie3 <- pie3D(health.prop, labels= names(health.prop), col=c("green4", "green3"), main="Have Members Used\nHealthcare Services?")
p3 <- barplot(yesdat$HealthQual, main="Quality of  Healthcare Services", ylab="Number of Responses", col = c("green3","greenyellow","green4", "limegreen"))
axis(side=1, at= p1,labels= c("Excellent","Good", "Fair","Poor"),cex.axis=.75)
p4 <- barplot(yesdat$HealthCost, main="Cost Value of Healthcare Services", ylab="Number of Responses", col = c("green3","greenyellow","green4", "limegreen"))
axis(side=1, at= p1,labels= c("Excellent","Good", "Fair","Poor"),cex.axis=.75)
serv.yes <- 26/(26+24)
serv.no <- 24/(26+24)
serv.prop <- c(serv.yes, serv.no)
names(serv.prop) <- c("Yes", "No")
#Graphically
pie5 <- pie3D(serv.prop, labels= names(serv.prop), col=c("green4", "green3"), main="Have Members Used\nAny Services?")
p5 <- barplot(yesdat$ServQual, main="Quality of Other Services", ylab="Number of Responses", col = c("green3","greenyellow","green4", "limegreen"),cex.axis=.75)
axis(side=1, at= p1,labels= c("Excellent","Good", "Fair","Poor"),cex.axis=.75)
p6 <- barplot(yesdat$HealthCost, main="Cost Value of Other Services", ylab="Number of Responses", col = c("green3","greenyellow","green4", "limegreen"))
axis(side=1, at= p1,labels= c("Excellent","Good", "Fair","Poor"),cex.axis=.75)
home.yes <- 3/48
home.no <- 45/48
home.prop <- c(home.yes, home.no)
names(home.prop) <- c("Yes", "No")
#Graphically
pie7 <- pie3D(home.prop, labels= names(home.prop), col=c("green4", "green3"), main="Have Members Used\nHome Transitioning Services?")
p7 <- barplot(yesdat$Help, main="Helpfulness of Home\nTransitioning Services", ylab="Number of Responses", col = c("green3","greenyellow","green4", "limegreen"))
axis(side=1, at= p1,labels= c("Excellent","Good", "Fair","Poor"),cex.axis=.75)
fam.yes <- 42/47
fam.no <- 5/47
fam.prop <- c(fam.yes, fam.no)
names(fam.prop) <- c("Yes", "No")
pie8 <- pie3D(fam.prop, labels= names(fam.prop), col=c("green4", "green3"), main="Do These Services Add Value?")
need.yes <- 3/21
need.no <- 18/21
need.prop <- c(need.yes, need.no)
names(need.prop) <- c("Yes", "No")
pie9 <- pie3D(need.prop, labels= names(need.prop), col=c("green4", "green3"), main="Are There Other Services\nYou Wish Were provided?")
p8 <- barplot(yesdat$Overall, main="Overall Quality of Services", ylab="Number of Responses", col = c("green3","greenyellow","green4", "limegreen"))
axis(side=1, at= p1,labels= c("Excellent","Good", "Fair","Poor"),cex.axis=.75)
part2 <- read.csv("C:\\Users\\NMLJ\\Documents\\AHS1.csv", header=TRUE)
b1<- barplot(part2$ServNeed, main="At Home Provides\nThe Services I Need", ylab="Number of Responses", col = c("green3","greenyellow","green4", "limegreen"))
axis(side=1, at= b1,labels= c("Strongly Agree","Agree", "Neither","Disagree", "Strongly Disagree"),cex.axis=.75)
b2<- barplot(part2$KnowPeople, main="Because Of At Home\nI Know More People", ylab="Number of Responses", col = c("green3","greenyellow","green4", "limegreen"))
axis(side=1, at= b2,labels= c("Strongly Agree","Agree", "Neither","Disagree", "Strongly Disagree"),cex.axis=.75)
b3<- barplot(part2$Expect, main="At Home Has Met Or\nExceeded My Expectations", ylab="Number of Responses", col = c("green3","greenyellow","green4", "limegreen"))
axis(side=1, at= b3,labels= c("Strongly Agree","Agree", "Neither","Disagree", "Strongly Disagree"),cex.axis=.75)
b4<- barplot(part2$BenefitFee, main="At Home Benefits Are Worth\nThe Membership Fees", ylab="Number of Responses", col = c("green3","greenyellow","green4", "limegreen"))
axis(side=1, at= b4,labels= c("Strongly Agree","Agree", "Neither","Disagree", "Strongly Disagree"),cex.axis=.75)
b5<- barplot(part2$LiveIn, main="At Home Will Enable Me\nTo Continue Living In My Home\nLonger Than If I Were Not A Member", ylab="Number of Responses", col = c("green3","greenyellow","green4", "limegreen"))
axis(side=1, at= b5,labels= c("Strongly Agree","Agree", "Neither","Disagree", "Strongly Disagree"),cex.axis=.75)
last <- read.csv("C:\\Users\\NMLJ\\Documents\\AHendsurv.csv", header=T)
e1 <- barplot(last$Q14, main="At Home Membership Satisfaction", ylab="Number of Responses", col = c("green3","greenyellow","green4", "limegreen"))
axis(side=1, at= e1,labels= c("Extremely","Very", "Somewhat","Satisfied", "Not"))
e2 <- barplot(last$Q15, main="Likelihood of Membership Renewal", ylab="Number of Responses", col = c("green3","greenyellow","green4", "limegreen"))
axis(side=1, at= e2,labels= c("Very Likely","Likely", "Not Sure","Unlikely", "Very Unlikely"),cex.axis=.75)
e3 <- barplot(last$Q14, main="Would You Reccommend At Home\nTo A Friend, Relative, Neighbor?", ylab="Number of Responses", col = c("green3","greenyellow","green4", "limegreen"))
axis(side=1, at= e3,labels= c("Defintiely Yes","Probably Yes", "Uncertain","Probably Not", "Defintiely Not"),cex.axis=.75)
ggplot(H.df,aes(x=Time,y=Subject,fill=value)) +
geom_tile(colour='blackâ€™)
H.df<-melt(H.mat)
cca.melt = melt(DTI.gend[sample(1:229, 229),])
colnames(cca.melt) = colnames(H.df)
cca.melt = arrange(cca.melt, Subject) %>%
mutate(h = rep(runif(229, 1, 5), each = 93))
cca.melt = melt(DTI.gend[sample(1:229, 229),])
colnames(cca.melt) = colnames(H.df)
cca.melt = arrange(cca.melt, Subject) %>%
mutate(h = rep(runif(229, 1, 5), each = 93))
k
#Need to round CCA to nearest tenth to get plot to run
##With gglasagna
gglasagna(cca.mat, legend=TRUE)
#With full ggplot code
##SEE EMAILED EDITS
ggplot(cca.df,aes(x=value,y=Var1,fill=value)) +
geom_tile(colour='black') + scale_fill_identity() +
ggtitle("CCA Lasagna Plot")+
library(devtools)                                                   library(dplyr)
library(devtools)                                                   library(dplyr)
library(dplyr)
#Removing row names
##CCA Matrix
DTI.cca <- DTI$cca
row.names(DTI.cca) = NULL
DTI.cca <- matrix(DTI.cca, 229,93)
##rCST
DTI.rcst <- DTI$rcst
row.names(DTI.rcst)  = NULL
DTI.rcst <- matrix(DTI.rcst, 229, 55)
##Pasat Rank Ordering
orderpasat = DTI[order(DTI$pasat),]
DTI.pasat = cbind(orderpasat$pasat, DTI[,-7])
##Gender Ordering
ordergender = DTI[order(DTI$gender),]
DTI.gender= cbind(ordergender$gender, DTI[,-10])
###CCA
DTI.gend <- DTI$cca
rownames(DTI.gend) = NULL
gend.mat <- cbind(DTI$gender, DTI.gend)
#Removing Mutiple visits  (First Visit Only)
DTI.1 <- DTI[DTI$visit == 1,]
DTI.1$visit <- NULL
DTI.1$case <- NULL
DTI.1$visit.time <- NULL
summary(DTI.1)
H.df <-melt(H.mat)
# Function is gglasagna()
# gglasagna does not need df, but rather takes matrix input
#Sample Example matrix (all steps must included to work)
test.mat <- matrix(1:36,6,6)[sample(1:6),]
rownames(test.mat) <- letters[1:nrow(test.mat)]
colnames(test.mat)<-seq(ncol(test.mat))
names(dimnames(test.mat))<-c('Subject','Time')
gglasagna(test.mat)
#This function also does not work for large data sets (legend and color palette gets terribly convoluted)
#IE:
gglasagna(test.mat, legend = TRUE, gridlines = FALSE,main = "Test Lasagna Plot")
##Given Example Matrix
H.mat <- matrix(NA, nrow=4, ncol=6)
H.mat[1, 1:6] = 100*c(2, 1, 1, 1, 1, 2)
H.mat[2, 1:6] = 100*c(2, 2, 2, 3, 2, 1)
H.mat[3, 1:6] = 100*c(2, 2, 1, 1, 1, 3)
H.mat[4, 1:6] = 100*c(3, 3, 2, 1, 2, 3)
## set rownames with ids
rownames(H.mat)<-c("P1","T1","P2","T2")
## set colnames with time / location / column index:
colnames(H.mat)<-seq(ncol(H.mat))
## name your dimensions
names(dimnames(H.mat))<-c('Subject','Time')
## print out to see it!
H.mat
gglasagna(H.mat)
H.df <-melt(H.mat)
library(devtools)
library(dplyr)
library(fields)
library(devtools)
library(lasagnar)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(colorspace)
library(fields)
##
library(shiny)
library(refund.shiny)
library(refund)
cca.mat <- DTI$cca
rownames(cca.mat) = NULL #Strip Matrix
cca.df <- melt(cca.mat)
cca.melt <- melt(DTI.cca)
colnames(cca.melt) <- colnames(cca.df)
col<-palette[match(ordered(cca.df$value),levels(ordered(cca.df$value)))]
colors <-palette[match(ordered(cca.df$value),levels(ordered(cca.df$value)))]
cca.melt <- arrange(cca.melt, Subject) %>%
mutate(h = rep(runif(229, 1, 5), each = 93))
ggplot(cca.df,aes(x=Time,y=Subject,fill=value) + geom_tile(colour='blackâ€™)
ggplot(cca.df,aes(x=Time,y=Subject,fill=value) + geom_tile(colour='blackâ€™)
geom_tile(colour='blackâ€™))
ggplot(cca.df,aes(x=Time,y=Subject,fill=value)) +
geom_tile(colour='blackâ€™))
ggplot(cca.df,aes(x=Time,y=Subject,fill=value)) +
geom_tile(colour='blackâ€™)
gglasagna(cca.mat, legend=TRUE)
#With full ggplot code
##SEE EMAILED EDITS
ggplot(cca.df,aes(x=value,y=Var1,fill=value)) +
cca.melt = melt(DTI.gend[sample(1:229, 229),])
H.df<-melt(H.mat
ggplot(cca.melt,aes(x=Time,y=Subject,fill=value)) +
geom_tile(colour='black') + scale_fill_identity() +
ggtitle("CCA Lasagna Plot") +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=5,face="bold"),
plot.title = element_text(hjust = 0))+
scale_x_discrete(breaks=1:100)
coord_cartesian(xlim=c(0,21297))
cca.melt
ggplot(cca.melt,aes(x=Var1,y=Var2,fill=value)) +
geom_tile(colour='black') + scale_fill_identity() +
ggtitle("CCA Lasagna Plot") +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=5,face="bold"),
plot.title = element_text(hjust = 0))+
scale_x_discrete(breaks=1:100)
coord_cartesian(xlim=c(0,21297))
DTI.cca <- DTI$cca
row.names(DTI.cca) = NULL
DTI.cca <- matrix(DTI.cca, 229,93)
DTI.rcst <- DTI$rcst
row.names(DTI.rcst)  = NULL
DTI.rcst <- matrix(DTI.rcst, 229, 55)
#Removing row names
##CCA Matrix
DTI.cca <- DTI$cca
row.names(DTI.cca) = NULL
DTI.cca <- matrix(DTI.cca, 229,93)
##rCST
DTI.rcst <- DTI$rcst
row.names(DTI.rcst)  = NULL
DTI.rcst <- matrix(DTI.rcst, 229, 55)
##Pasat Rank Ordering
orderpasat = DTI[order(DTI$pasat),]
DTI.pasat = cbind(orderpasat$pasat, DTI[,-7])
##Gender Ordering
ordergender = DTI[order(DTI$gender),]
DTI.gender= cbind(ordergender$gender, DTI[,-10])
###CCA
DTI.gend <- DTI$cca
rownames(DTI.gend) = NULL
gend.mat <- cbind(DTI$gender, DTI.gend)
#Removing Mutiple visits  (First Visit Only)
DTI.1 <- DTI[DTI$visit == 1,]
DTI.1$visit <- NULL
DTI.1$case <- NULL
DTI.1$visit.time <- NULL
gglasagna(cca.mat)
col.cca <- palette[match(ordered(cca.mat$value),levels(ordered(cca.df$value)))]
col.cca <- palette[match(ordered(cca.df$value),levels(ordered(cca.df$value)))]
gglasagna(cca.mat,col = col)
gglasagna(cca.mat,col = col, legend = TRUE)
test.mat <- matrix(1:36,6,6)[sample(1:6),]
rownames(test.mat) <- letters[1:nrow(test.mat)]
colnames(test.mat)<-seq(ncol(test.mat))
names(dimnames(test.mat))<-c('Subject','Time')
gglasagna(test.mat)
cca.mat
rownames(cca.mat)
cca.mat
rownames(cca.mat)
colnames(cca.mat) <- seq(ncol(cca.mat))
names(dimnames(cca.mat)) <- c("Subject", "Time")
gglasagna(cca.mat)
col<-palette[match(ordered(cca.df$value),levels(ordered(cca.df$value)))]
gglasagna(cca.mat, col = col )
gglasagna(cca.mat, col = col, legend = TRUE )
##Given Example Matrix
H.mat <- matrix(NA, nrow=4, ncol=6)
H.mat[1, 1:6] = 100*c(2, 1, 1, 1, 1, 2)
H.mat[2, 1:6] = 100*c(2, 2, 2, 3, 2, 1)
H.mat[3, 1:6] = 100*c(2, 2, 1, 1, 1, 3)
H.mat[4, 1:6] = 100*c(3, 3, 2, 1, 2, 3)
## set rownames with ids
rownames(H.mat)<-c("P1","T1","P2","T2")
## set colnames with time / location / column index:
colnames(H.mat)<-seq(ncol(H.mat))
## name your dimensions
names(dimnames(H.mat))<-c('Subject','Time')
## print out to see it!
H.mat
gglasagna(H.mat)
cca.mat
rownames(cca.mat)<-seq(1:nrow(cca.mat))
rownames(cca.mat)
colnames(cca.mat)<-seq(ncol(H.mat))
colnames(cca.mat)<-seq(ncol(cca.mat))
names(dimnames(cca.mat))<-c("Subject","Time")
cca.mat
gglasagna(cca.mat)
cca.mat <- DTI$cca
rownames(cca.mat) = NULL #Strip Matrix
cca.df <- melt(cca.mat)
rownames(cca.mat)<-seq(1:nrow(cca.mat))
rownames(cca.mat)
## set colnames with time / location / column index:
colnames(cca.mat)<- seq(ncol(cca.mat))
## name your dimensions
names(dimnames(cca.mat))<-c("Subject","Time")
## print out to see it!
cca.mat
rownames(cca.mat)<-seq(nrow(cca.mat))
rownames(cca.mat)
colnames(cca.melt) <- colnames(cca.df)
cca.melt <- arrange(cca.melt, Subject) %>%
mutate(h = rep(runif(229, 1, 5), each = 93))
colnames(cca.melt) <- colnames(cca.df)
colnames(cca.melt) <- colnames(cca.mat)
View(DTI.gend)
View(cca.mat)
## set rownames with ids
rownames(cca.mat)<-seq(nrow(cca.mat))
## set colnames with time / location / column index:
colnames(cca.mat)<- seq(ncol(cca.mat))
## name your dimensions
names(dimnames(cca.mat))<-c("Subject","Time")
## print out to see it!
cca.mat
cca.melt <- melt(cca.mat[sample(1:229, 229),])
colnames(cca.melt) = colnames(cca.mat)
cca.melt = arrange(cca.melt, Subject) %>%
mutate(h = rep(runif(229, 1, 5), each = 93))
colnames(cca.melt) = colnames(cca.df)
cca.df
#Data Frame Set Up
## set rownames with ids
rownames(cca.df)<-seq(nrow(cca.df))
## set colnames with time / location / column index:
colnames(cca.df)<- seq(ncol(cca.df))
## name your dimensions
names(dimnames(cca.df))<-c("Subject","Time")
## print out to see it!
cca.df
colnames(cca.melt) <- colnames(cca.mat)
cca.melt <- melt(cca.df[sample(1:229, 229),])
colnames(cca.melt) = colnames(cca.df)
cca.melt = arrange(cca.melt, Subject) %>%
mutate(h = rep(runif(229, 1, 5), each = 93))
cca.melt = arrange(cca.melt, cca.df$Subject) %>%
mutate(h = rep(runif(229, 1, 5), each = 93))
col <-palette[match(ordered(cca.df$value),levels(ordered(cca.df$value)))]
cca.melt <- melt(DTI.cca)
colnames(cca.melt) = seq(ncol(DTI.cca))
cca.melt = melt(DTI.cca[sample(1:229, 229),])
colnames(cca.melt) = colnames(DTI.cca)
cca.melt = arrange(cca.melt, Subject) %>%
mutate(h = rep(runif(229, 1, 5), each = 93))
colnames(cca.melt) = seq(ncol(DTI.cca))
?refund::bayes_fosr
library(shiny)
library(shinydashboard)
shinyUI( fluidPage(
navbarPage(
includeCSS("style.css"),
tabPanel("Crypotography",icon = icon("unlock"),
box(width = 6,
img(src="murder.jpg", width = 400) ),
box(width = 6,
helpText("There was a death on Treebark Ln. The victim was identified
as Mark Oswalt, who recently was married. The police went to the crime scene and they
reported the death as a suicide. Later that day, after the police left, a private detective,
hired by the victim's friend who thought it was a murder, searched the crime scene and
found a note the police missed. It read: "),
helpText("4,3: 8,1:_: 9,1: 2,1: 7,4:_: 6,1:9,3:_: 9,1: 4,3: 3,3: 3,2: !"),
helpText("The detective took out his cell phone and started dialing the
police to tell them about his findings. Once the detective opened the phone to dial, he
immediately screamed out, 'I SOLVED IT!'"),
br(),
helpText("Who was the murderer and how did the detective find out?")
)
),
tabPanel("Exploratory Analysis",icon=icon("line-chart"),
sidebarLayout(position="left",
sidebarPanel(width = 3),
mainPanel(width = 9)
)
),
tabPanel("Shifting",icon = icon("apple"),
sidebarPanel(
textInput("text", "Text:", "I love cryptography."),
numericInput("num", "Number of shift",  value = 1,min = 1, max = 25),
submitButton("Submit")
),
mainPanel(verbatimTextOutput("text1"),
verbatimTextOutput("text2")
)
),
tabPanel("Mapping",icon = icon("apple"),
sidebarPanel(width = 12,
textInput("text1", "Text:", "This is the last project."),
numericInput("num1", "Number of Iteration",  value = 10,min = 1, max = 100),
submitButton("Submit")
),
mainPanel(width = 12,
verbatimTextOutput("text3"),
verbatimTextOutput("text4"),
verbatimTextOutput("text5"),
verbatimTextOutput("text6"),
verbatimTextOutput("text7")
)
),
tabPanel("vigenere cipher",icon = icon("apple"),
sidebarPanel(
textInput("text2", "Text:", "I love cryptography."),
textInput("text3", "Key:", "elephant"),
submitButton("Submit")
),
mainPanel(verbatimTextOutput("text8"),
verbatimTextOutput("text9")
)
),
tabPanel("permutation",icon = icon("apple"),
sidebarPanel(
textInput("text4", "Text:", "I love cryptography."),
#textInput("text3", "Key:", "elephant"),
submitButton("Submit")
),
mainPanel(tableOutput("matrix"),
verbatimTextOutput("text10")
)
),
tabPanel("Ngram",icon = icon("apple"),
sidebarPanel(
textInput("firststring", label = h6("Text input") ,
value="the little prince"),
numericInput("textlength", label = h6("Text input"),
value="30"),
numericInput("ng", label = h6("Text input"),
value="4"),
submitButton("Submit")
),
mainPanel(
textOutput("TextFinal"
)
#tabsetPanel(type = "tabs",
#           tabPanel("Plot", plotOutput("plot")),
#            tabPanel("Summary", verbatimTextOutput("summary")),
#             tabPanel("Table", tableOutput("table"))
)
),
tabPanel("Info",icon=icon("facebook"),
tabItem(tabName = "about",
box(width = 12,h3(icon("group"),"Team Members"),
br(),
h5("Nicole Marie Lapointe Jameson: nml2145@columbia.edu"),
h5("Yanran Wang: yw2758@columbia.edu"),
h5("Zehao Wang: zw2323@columbia.edu"),
h5("Yanyu Zheng: yz2690@columbia.edu"),
h5("Jadie Zuo: xz2467@columbia.edu"))
)
)
)
))
runApp('C:/Users/NMLJ/Desktop/finalproject-p5-team6/lib/shift')
library(shinydashboard)
install.packages(shinydashboard)
install.packages("shinydashboard")
library(shinydashboard)
runApp('C:/Users/NMLJ/Desktop/finalproject-p5-team6/lib/shift')
runApp('C:/Users/NMLJ/Desktop/finalproject-p5-team6/lib/shift')
runApp('C:/Users/NMLJ/Desktop/finalproject-p5-team6/lib/shift')
runApp('C:/Users/NMLJ/Desktop/finalproject-p5-team6/lib/shift')
library(RWeka)
install.packages(RWeka)
install.packages("RWeka")
library(dplyr)
library(RWeka)
library(RWeka)
shiny::runApp('C:/Users/NMLJ/Desktop/finalproject-p5-team6/lib/shift')
install.packages("rJava")
library(rJava)
file.choose()
setwd("C:\\Users\\NMLJ\\Desktop\\finalproject-p5-team6\\")
library(tm)
library(RWeka)
install.packages("rJava")
library(rJava)
install.packages("RWeka")
library(RWeka)
runApp('lib/shift')
export JAVA_HOME
